/*
 * This file is part of the Charly Virtual Machine (https://github.com/KCreate/charly-vm)
 *
 * MIT License
 *
 * Copyright (c) 2017 - 2020 Leonard Schütz
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <algorithm>
#include <string>
#include <unordered_map>
#include <vector>
#include <optional>

#pragma once

namespace Charly {
static const std::string kUsageMessage = "Usage: charly [filename] [flags] [--] [arguments]";

static const std::string kExampleUsages =
    "Examples:\n"
    "\n"
    "    Executing a file:\n"
    "    $ charly file.ch\n"
    "\n"
    "    Dumping generated bytecodes for a file:\n"
    "    $ charly file.ch -fskipexec -fdump_asm\n"
    "\n"
    "    Dumping generated AST for a file:\n"
    "    $ charly file.ch -fskipexec -fdump_ast\n"
    "\n"
    "    Disabling the cli-parser using '--'\n"
    "    $ charly dump-argv.ch -- -fdump_asm -fskipexec";

static const std::string kLicense =
    "MIT License \n"
    "\n"
    "Copyright (c) 2017 - 2020 Leonard Schütz \n"
    "\n"
    "Permission is hereby granted, free of charge, to any person obtaining a copy \n"
    "of this software and associated documentation files (the \"Software\"), to deal \n"
    "in the Software without restriction, including without limitation the rights \n"
    "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n"
    "copies of the Software, and to permit persons to whom the Software is \n"
    "furnished to do so, subject to the following conditions: \n"
    "The above copyright notice and this permission notice shall be included in all \n"
    "copies or substantial portions of the Software. \n"
    "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n"
    "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n"
    "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n"
    "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n"
    "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n"
    "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \n"
    "SOFTWARE.";

static const std::string kVersion = "pre-alpha development release";

const std::string kEnvironmentStringDelimiter = "=";

// Represents a single flag
struct FlagDescriptor {
  std::string                name;                      // name of the flag (e.g "dump_asm")
  std::optional<char>        shortselector;             // e.g -h, -v, -l
  std::string                description;               // description of what the flag does
  std::optional<std::string> argument = std::nullopt;   // wether this flag requires an argument
};

// Represents a group of flags
struct FlagGroup {
  std::string name;
  std::vector<FlagDescriptor> flags;
};

// All existing flags in the charly program
static std::vector<FlagGroup> kDefinedFlagGroups = {
  { "Default",                {
    { "help",                 'h',          "Prints the help page" },
    { "version",              'v',          "Prints the version" },
    { "license",              'l',          "Prints the license" },
    { "vmdir",                std::nullopt, "Prints the CHARLYVMDIR environment variable" }
  } },
  { "Dump",                   {
    { "skipexec",             std::nullopt, "Don't execute the code" },
    { "dump",                 std::nullopt, "Add file to list of files to be dumped",               "filename" },
    { "dump_ast",             std::nullopt, "Dump the AST of the input file" },
    { "dump_tokens",          std::nullopt, "Dump the tokens of the input file" },
    { "dump_asm",             std::nullopt, "Dump the compiled bytecode of the input file" },
    { "asm_no_offsets",       std::nullopt, "Do not print offsets in dumped bytecode" },
    { "asm_no_branches",      std::nullopt, "Do not print branches in dumped bytecode" },
    { "asm_no_func_branches", std::nullopt, "Do not print function branches in dumped bytecode" }
  } },

#ifndef CHARLY_PRODUCTION
  { "Debugging",              {
    { "instruction_profile",  std::nullopt, "Profile the execution time of individual bytecodes" },
    { "trace_opcodes",        std::nullopt, "Display opcodes as they are executed" },
    { "trace_catchtables",    std::nullopt, "Trace catchtable enter / leave" },
    { "trace_frames",         std::nullopt, "Trace frame enter / leave" },
    { "trace_gc",             std::nullopt, "Display GC debug output" }
  } }
#endif
};

namespace CLIFlags {
  extern std::unordered_map<std::string, std::vector<std::string>> s_charly_flags;
  extern std::vector<std::string> s_user_flags;
  extern std::unordered_map<std::string, std::string> s_environment;

  void init_argv(int argc, char** argv);
  void init_env(char** environment);

  // Set a flag
  void set_flag(const std::string& name, std::optional<std::string> argument = std::nullopt);

  // Check wether a specific flag is set, addressed by its full name
  bool is_flag_set(const std::string& name);

  // Return all arguments for a specific flag
  const std::vector<std::string> get_arguments_for_flag(const std::string& name);

  // Returns the user argument at index
  const std::optional<std::string> get_argument(uint32_t index);

  // Check wether a flag has a specific argument set
  //
  // e.g:
  // CLIFlags::flag_has_argument("dump", current_filename, true)
  bool flag_has_argument(const std::string& name, const std::string& argument, bool match_substring = false);

  // Return the value of some environment variable
  const std::optional<std::string> get_environment_for_key(const std::string& key);
};
}  // namespace Charly
